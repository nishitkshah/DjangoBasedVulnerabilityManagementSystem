from vm_app.models import Node
from vm_app.serializers import NodeSerializer, ResourceSerializer, FindingSerializer, NewFindingRequestSerializer
from rest_framework_mongoengine import generics
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework import status

class NodeList(generics.ListCreateAPIView):
    queryset = Node.objects.all()
    serializer_class = NodeSerializer

class NodeDetails(generics.RetrieveUpdateDestroyAPIView):
    queryset = Node.objects.all()
    serializer_class = NodeSerializer

class NodeAddFinding(APIView):
    def get_object(self, id):
        return Node.objects.get(pk=id)

    def patch(self, request, id, format=None):
        node = self.get_object(id)
        serializer = NewFindingRequestSerializer(data=request.data)
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        req_resource = request.data['resource']
        finding_data = request.data.copy()
        del finding_data['resource']
        serializer = FindingSerializer(data=finding_data)
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        node.node_resources.get(resource=req_resource).findings.create(**finding_data)	#ToDo: Use res_id (objectid) instead
        node.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)

class AllNodesRiskScore(APIView):
    def get_object(self):
        return Node.objects

    def get(self, request, format=None):
        nodes = self.get_object()
        data = {"nodes": []}
        for node in nodes:
            node_data = {}
            node_data["id"] = str(node.id)
            node_data["node_name"] = node.node_name
            node_data["risk_score"] = node.risk_score()
            data["nodes"].append(node_data)
        return Response(data, status=status.HTTP_200_OK)

class NodeRiskScore(APIView):
    def get_object(self, id):
        return Node.objects.get(pk=id)

    def get(self, request, id, format=None):
        node = self.get_object(id)
        data = {}
        data["id"] = str(node.id)
        data["node_name"] = node.node_name
        data["risk_score"] = node.risk_score()
        data["resources"] = []
        for resource in node.node_resources:
            serializer = ResourceSerializer(resource)
            resource_data = serializer.data
            del resource_data["findings"]
            resource_data["risk_score"] = resource.risk_score()
            data["resources"].append(resource_data)
        return Response(data, status=status.HTTP_200_OK)

class ResourceRiskScore(APIView):
    def get_object(self, id, r_id):
        return Node.objects.get(pk=id).node_resources.get(resource_id=r_id)

    def get(self, request, id, r_id, format=None):
        res = self.get_object(id, r_id)
        data = {}
        data["id"] = id
        data["resource_id"] = str(res.resource_id)
        data["risk_score"] = res.risk_score()
        data["findings"] = []
        for finding in res.findings:
            serializer = FindingSerializer(finding)
            finding_data = serializer.data
            data["findings"].append(finding_data)
        return Response(data, status=status.HTTP_200_OK)

