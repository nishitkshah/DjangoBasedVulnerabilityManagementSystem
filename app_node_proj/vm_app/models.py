from mongoengine import *
from bson.objectid import ObjectId
import json

CHOICES = None
with open('vm_app/choices.json', 'r') as choices_file:
    CHOICES = json.load(choices_file)

class Finding(EmbeddedDocument):
    finding_id = ObjectIdField(required=True, default=ObjectId, unique=True, primary_key=True)
    finding_details = StringField()
    finding_type = StringField(max_length=200)
    finding_severity = StringField(max_length=200, choices=CHOICES["finding_severity"])
    finding_score = IntField(required=True)
    finding_code = StringField()
    finding_code_type = StringField(max_length=200, choices=CHOICES["finding_code_type"])

class Resource(EmbeddedDocument):
    resource_id = ObjectIdField(required=True, default=ObjectId, unique=True, primary_key=True)
    resource = StringField()
    resource_criticality = IntField()
    resource_type = StringField(max_length=200, choices=CHOICES["resource_type"])
    findings = EmbeddedDocumentListField(Finding)

    def risk_score(self):
        score = 0
        for finding in self.findings:
            score += finding.finding_score
        return self.resource_criticality*score

class SystemDetails(EmbeddedDocument):
    os = StringField(max_length=200, choices=CHOICES["os"])

class Node(Document):
    node_name = StringField()
    node_type = StringField(max_length=200, choices=CHOICES["node_type"])
    node_name_type = StringField(max_length=200, choices=CHOICES["node_name_type"])
    node_system_details = EmbeddedDocumentField(SystemDetails)
    node_resources = EmbeddedDocumentListField(Resource)

    def __str__(self):
        return self.nodename

    def risk_score(self):
        score = 0
        for res in self.node_resources:
            score += res.risk_score()
        return score

